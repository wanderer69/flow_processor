// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: frontclient.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FrontClientConnector_Login_FullMethodName            = "/frontprocessorclient.FrontClientConnector/Login"
	FrontClientConnector_Connect_FullMethodName          = "/frontprocessorclient.FrontClientConnector/Connect"
	FrontClientConnector_Ping_FullMethodName             = "/frontprocessorclient.FrontClientConnector/Ping"
	FrontClientConnector_ListProcesses_FullMethodName    = "/frontprocessorclient.FrontClientConnector/ListProcesses"
	FrontClientConnector_ListProcessFlows_FullMethodName = "/frontprocessorclient.FrontClientConnector/ListProcessFlows"
)

// FrontClientConnectorClient is the client API for FrontClientConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontClientConnectorClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (FrontClientConnector_ConnectClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
	ListProcessFlows(ctx context.Context, in *ListProcessFlowsRequest, opts ...grpc.CallOption) (*ListProcessFlowsResponse, error)
}

type frontClientConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontClientConnectorClient(cc grpc.ClientConnInterface) FrontClientConnectorClient {
	return &frontClientConnectorClient{cc}
}

func (c *frontClientConnectorClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, FrontClientConnector_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClientConnectorClient) Connect(ctx context.Context, opts ...grpc.CallOption) (FrontClientConnector_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrontClientConnector_ServiceDesc.Streams[0], FrontClientConnector_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &frontClientConnectorConnectClient{stream}
	return x, nil
}

type FrontClientConnector_ConnectClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type frontClientConnectorConnectClient struct {
	grpc.ClientStream
}

func (x *frontClientConnectorConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontClientConnectorConnectClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontClientConnectorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, FrontClientConnector_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClientConnectorClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, FrontClientConnector_ListProcesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClientConnectorClient) ListProcessFlows(ctx context.Context, in *ListProcessFlowsRequest, opts ...grpc.CallOption) (*ListProcessFlowsResponse, error) {
	out := new(ListProcessFlowsResponse)
	err := c.cc.Invoke(ctx, FrontClientConnector_ListProcessFlows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontClientConnectorServer is the server API for FrontClientConnector service.
// All implementations must embed UnimplementedFrontClientConnectorServer
// for forward compatibility
type FrontClientConnectorServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Connect(FrontClientConnector_ConnectServer) error
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
	ListProcessFlows(context.Context, *ListProcessFlowsRequest) (*ListProcessFlowsResponse, error)
	mustEmbedUnimplementedFrontClientConnectorServer()
}

// UnimplementedFrontClientConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedFrontClientConnectorServer struct {
}

func (UnimplementedFrontClientConnectorServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFrontClientConnectorServer) Connect(FrontClientConnector_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedFrontClientConnectorServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFrontClientConnectorServer) ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedFrontClientConnectorServer) ListProcessFlows(context.Context, *ListProcessFlowsRequest) (*ListProcessFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessFlows not implemented")
}
func (UnimplementedFrontClientConnectorServer) mustEmbedUnimplementedFrontClientConnectorServer() {}

// UnsafeFrontClientConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontClientConnectorServer will
// result in compilation errors.
type UnsafeFrontClientConnectorServer interface {
	mustEmbedUnimplementedFrontClientConnectorServer()
}

func RegisterFrontClientConnectorServer(s grpc.ServiceRegistrar, srv FrontClientConnectorServer) {
	s.RegisterService(&FrontClientConnector_ServiceDesc, srv)
}

func _FrontClientConnector_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontClientConnectorServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontClientConnector_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontClientConnectorServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontClientConnector_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontClientConnectorServer).Connect(&frontClientConnectorConnectServer{stream})
}

type FrontClientConnector_ConnectServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type frontClientConnectorConnectServer struct {
	grpc.ServerStream
}

func (x *frontClientConnectorConnectServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontClientConnectorConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FrontClientConnector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontClientConnectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontClientConnector_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontClientConnectorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontClientConnector_ListProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontClientConnectorServer).ListProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontClientConnector_ListProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontClientConnectorServer).ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontClientConnector_ListProcessFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontClientConnectorServer).ListProcessFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontClientConnector_ListProcessFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontClientConnectorServer).ListProcessFlows(ctx, req.(*ListProcessFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontClientConnector_ServiceDesc is the grpc.ServiceDesc for FrontClientConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontClientConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontprocessorclient.FrontClientConnector",
	HandlerType: (*FrontClientConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _FrontClientConnector_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FrontClientConnector_Ping_Handler,
		},
		{
			MethodName: "ListProcesses",
			Handler:    _FrontClientConnector_ListProcesses_Handler,
		},
		{
			MethodName: "ListProcessFlows",
			Handler:    _FrontClientConnector_ListProcessFlows_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _FrontClientConnector_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "frontclient.proto",
}
