// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: client.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientConnector_AddProcess_FullMethodName = "/processorclient.ClientConnector/AddProcess"
	ClientConnector_SetHandler_FullMethodName = "/processorclient.ClientConnector/SetHandler"
	ClientConnector_Connect_FullMethodName    = "/processorclient.ClientConnector/Connect"
)

// ClientConnectorClient is the client API for ClientConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientConnectorClient interface {
	AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*AddProcessResponse, error)
	SetHandler(ctx context.Context, in *SetHandlerRequest, opts ...grpc.CallOption) (*SetHandlerResponse, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (ClientConnector_ConnectClient, error)
}

type clientConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewClientConnectorClient(cc grpc.ClientConnInterface) ClientConnectorClient {
	return &clientConnectorClient{cc}
}

func (c *clientConnectorClient) AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*AddProcessResponse, error) {
	out := new(AddProcessResponse)
	err := c.cc.Invoke(ctx, ClientConnector_AddProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientConnectorClient) SetHandler(ctx context.Context, in *SetHandlerRequest, opts ...grpc.CallOption) (*SetHandlerResponse, error) {
	out := new(SetHandlerResponse)
	err := c.cc.Invoke(ctx, ClientConnector_SetHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientConnectorClient) Connect(ctx context.Context, opts ...grpc.CallOption) (ClientConnector_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientConnector_ServiceDesc.Streams[0], ClientConnector_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientConnectorConnectClient{stream}
	return x, nil
}

type ClientConnector_ConnectClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type clientConnectorConnectClient struct {
	grpc.ClientStream
}

func (x *clientConnectorConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientConnectorConnectClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientConnectorServer is the server API for ClientConnector service.
// All implementations must embed UnimplementedClientConnectorServer
// for forward compatibility
type ClientConnectorServer interface {
	AddProcess(context.Context, *AddProcessRequest) (*AddProcessResponse, error)
	SetHandler(context.Context, *SetHandlerRequest) (*SetHandlerResponse, error)
	Connect(ClientConnector_ConnectServer) error
	mustEmbedUnimplementedClientConnectorServer()
}

// UnimplementedClientConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedClientConnectorServer struct {
}

func (UnimplementedClientConnectorServer) AddProcess(context.Context, *AddProcessRequest) (*AddProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcess not implemented")
}
func (UnimplementedClientConnectorServer) SetHandler(context.Context, *SetHandlerRequest) (*SetHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHandler not implemented")
}
func (UnimplementedClientConnectorServer) Connect(ClientConnector_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedClientConnectorServer) mustEmbedUnimplementedClientConnectorServer() {}

// UnsafeClientConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientConnectorServer will
// result in compilation errors.
type UnsafeClientConnectorServer interface {
	mustEmbedUnimplementedClientConnectorServer()
}

func RegisterClientConnectorServer(s grpc.ServiceRegistrar, srv ClientConnectorServer) {
	s.RegisterService(&ClientConnector_ServiceDesc, srv)
}

func _ClientConnector_AddProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientConnectorServer).AddProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientConnector_AddProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientConnectorServer).AddProcess(ctx, req.(*AddProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientConnector_SetHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientConnectorServer).SetHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientConnector_SetHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientConnectorServer).SetHandler(ctx, req.(*SetHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientConnector_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientConnectorServer).Connect(&clientConnectorConnectServer{stream})
}

type ClientConnector_ConnectServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientConnectorConnectServer struct {
	grpc.ServerStream
}

func (x *clientConnectorConnectServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientConnectorConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientConnector_ServiceDesc is the grpc.ServiceDesc for ClientConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "processorclient.ClientConnector",
	HandlerType: (*ClientConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProcess",
			Handler:    _ClientConnector_AddProcess_Handler,
		},
		{
			MethodName: "SetHandler",
			Handler:    _ClientConnector_SetHandler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ClientConnector_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client.proto",
}
