// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package process is a generated GoMock package.
package process

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/wanderer69/flow_processor/pkg/entity"
	timer "github.com/wanderer69/flow_processor/pkg/timer"
)

// MockExternalTopic is a mock of ExternalTopic interface.
type MockExternalTopic struct {
	ctrl     *gomock.Controller
	recorder *MockExternalTopicMockRecorder
}

// MockExternalTopicMockRecorder is the mock recorder for MockExternalTopic.
type MockExternalTopicMockRecorder struct {
	mock *MockExternalTopic
}

// NewMockExternalTopic creates a new mock instance.
func NewMockExternalTopic(ctrl *gomock.Controller) *MockExternalTopic {
	mock := &MockExternalTopic{ctrl: ctrl}
	mock.recorder = &MockExternalTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalTopic) EXPECT() *MockExternalTopicMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockExternalTopic) Init(ctx context.Context, processName, topicName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, processName, topicName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockExternalTopicMockRecorder) Init(ctx, processName, topicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockExternalTopic)(nil).Init), ctx, processName, topicName)
}

// Send mocks base method.
func (m *MockExternalTopic) Send(ctx context.Context, processName, processId, topicName string, msgs []*entity.Message, vars []*entity.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, processName, processId, topicName, msgs, vars)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockExternalTopicMockRecorder) Send(ctx, processName, processId, topicName, msgs, vars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExternalTopic)(nil).Send), ctx, processName, processId, topicName, msgs, vars)
}

// SetTopicResponse mocks base method.
func (m *MockExternalTopic) SetTopicResponse(ctx context.Context, processName, topicName string, fn func(string, string, string, []*entity.Message, []*entity.Variable) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopicResponse", ctx, processName, topicName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTopicResponse indicates an expected call of SetTopicResponse.
func (mr *MockExternalTopicMockRecorder) SetTopicResponse(ctx, processName, topicName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicResponse", reflect.TypeOf((*MockExternalTopic)(nil).SetTopicResponse), ctx, processName, topicName, fn)
}

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockTimer) Set(ctx context.Context, processName, processId, timerID string, timerValue *timer.TimerValue, msgs []*entity.Message, vars []*entity.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, processName, processId, timerID, timerValue, msgs, vars)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTimerMockRecorder) Set(ctx, processName, processId, timerID, timerValue, msgs, vars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTimer)(nil).Set), ctx, processName, processId, timerID, timerValue, msgs, vars)
}

// SetTimerResponse mocks base method.
func (m *MockTimer) SetTimerResponse(ctx context.Context, processName, timerID string, fn func(string, string, string, time.Time, []*entity.Message, []*entity.Variable) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimerResponse", ctx, processName, timerID, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimerResponse indicates an expected call of SetTimerResponse.
func (mr *MockTimerMockRecorder) SetTimerResponse(ctx, processName, timerID, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimerResponse", reflect.TypeOf((*MockTimer)(nil).SetTimerResponse), ctx, processName, timerID, fn)
}

// MockMailBox is a mock of MailBox interface.
type MockMailBox struct {
	ctrl     *gomock.Controller
	recorder *MockMailBoxMockRecorder
}

// MockMailBoxMockRecorder is the mock recorder for MockMailBox.
type MockMailBoxMockRecorder struct {
	mock *MockMailBox
}

// NewMockMailBox creates a new mock instance.
func NewMockMailBox(ctrl *gomock.Controller) *MockMailBox {
	mock := &MockMailBox{ctrl: ctrl}
	mock.recorder = &MockMailBoxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailBox) EXPECT() *MockMailBoxMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockMailBox) Set(ctx context.Context, processName, processId, mailBoxID string, msgTemplates []*entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, processName, processId, mailBoxID, msgTemplates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMailBoxMockRecorder) Set(ctx, processName, processId, mailBoxID, msgTemplates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMailBox)(nil).Set), ctx, processName, processId, mailBoxID, msgTemplates)
}

// TimerResponse mocks base method.
func (m *MockMailBox) TimerResponse(ctx context.Context, fn func(*entity.Message, *entity.Message, *entity.Message) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimerResponse", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimerResponse indicates an expected call of TimerResponse.
func (mr *MockMailBoxMockRecorder) TimerResponse(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimerResponse", reflect.TypeOf((*MockMailBox)(nil).TimerResponse), ctx, fn)
}

// MockExternalActivation is a mock of ExternalActivation interface.
type MockExternalActivation struct {
	ctrl     *gomock.Controller
	recorder *MockExternalActivationMockRecorder
}

// MockExternalActivationMockRecorder is the mock recorder for MockExternalActivation.
type MockExternalActivationMockRecorder struct {
	mock *MockExternalActivation
}

// NewMockExternalActivation creates a new mock instance.
func NewMockExternalActivation(ctrl *gomock.Controller) *MockExternalActivation {
	mock := &MockExternalActivation{ctrl: ctrl}
	mock.recorder = &MockExternalActivationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalActivation) EXPECT() *MockExternalActivationMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockExternalActivation) Init(ctx context.Context, processName, taskName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, processName, taskName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockExternalActivationMockRecorder) Init(ctx, processName, taskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockExternalActivation)(nil).Init), ctx, processName, taskName)
}

// SetActivationResponse mocks base method.
func (m *MockExternalActivation) SetActivationResponse(ctx context.Context, processName, taskName string, fn func(string, string, string, []*entity.Message, []*entity.Variable) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActivationResponse", ctx, processName, taskName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActivationResponse indicates an expected call of SetActivationResponse.
func (mr *MockExternalActivationMockRecorder) SetActivationResponse(ctx, processName, taskName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationResponse", reflect.TypeOf((*MockExternalActivation)(nil).SetActivationResponse), ctx, processName, taskName, fn)
}

// MockStoreClient is a mock of StoreClient interface.
type MockStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreClientMockRecorder
}

// MockStoreClientMockRecorder is the mock recorder for MockStoreClient.
type MockStoreClientMockRecorder struct {
	mock *MockStoreClient
}

// NewMockStoreClient creates a new mock instance.
func NewMockStoreClient(ctrl *gomock.Controller) *MockStoreClient {
	mock := &MockStoreClient{ctrl: ctrl}
	mock.recorder = &MockStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreClient) EXPECT() *MockStoreClientMockRecorder {
	return m.recorder
}

// LoadProcessDiagramm mocks base method.
func (m *MockStoreClient) LoadProcessDiagramm(ctx context.Context, processName string) (*entity.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProcessDiagramm", ctx, processName)
	ret0, _ := ret[0].(*entity.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProcessDiagramm indicates an expected call of LoadProcessDiagramm.
func (mr *MockStoreClientMockRecorder) LoadProcessDiagramm(ctx, processName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProcessDiagramm", reflect.TypeOf((*MockStoreClient)(nil).LoadProcessDiagramm), ctx, processName)
}

// LoadProcessStates mocks base method.
func (m *MockStoreClient) LoadProcessStates(ctx context.Context, processExecutor string) ([]*entity.ProcessExecutorStateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProcessStates", ctx, processExecutor)
	ret0, _ := ret[0].([]*entity.ProcessExecutorStateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProcessStates indicates an expected call of LoadProcessStates.
func (mr *MockStoreClientMockRecorder) LoadProcessStates(ctx, processExecutor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProcessStates", reflect.TypeOf((*MockStoreClient)(nil).LoadProcessStates), ctx, processExecutor)
}

// StoreChangeProcessState mocks base method.
func (m *MockStoreClient) StoreChangeProcessState(ctx context.Context, processExecutor, processID, processExecutorState, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreChangeProcessState", ctx, processExecutor, processID, processExecutorState, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreChangeProcessState indicates an expected call of StoreChangeProcessState.
func (mr *MockStoreClientMockRecorder) StoreChangeProcessState(ctx, processExecutor, processID, processExecutorState, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreChangeProcessState", reflect.TypeOf((*MockStoreClient)(nil).StoreChangeProcessState), ctx, processExecutor, processID, processExecutorState, data)
}

// StoreFinishProcessState mocks base method.
func (m *MockStoreClient) StoreFinishProcessState(ctx context.Context, processExecutor, processID, processExecutorState string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFinishProcessState", ctx, processExecutor, processID, processExecutorState)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFinishProcessState indicates an expected call of StoreFinishProcessState.
func (mr *MockStoreClientMockRecorder) StoreFinishProcessState(ctx, processExecutor, processID, processExecutorState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFinishProcessState", reflect.TypeOf((*MockStoreClient)(nil).StoreFinishProcessState), ctx, processExecutor, processID, processExecutorState)
}

// StoreStartProcessState mocks base method.
func (m *MockStoreClient) StoreStartProcessState(ctx context.Context, processExecutor, processID, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreStartProcessState", ctx, processExecutor, processID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreStartProcessState indicates an expected call of StoreStartProcessState.
func (mr *MockStoreClientMockRecorder) StoreStartProcessState(ctx, processExecutor, processID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreStartProcessState", reflect.TypeOf((*MockStoreClient)(nil).StoreStartProcessState), ctx, processExecutor, processID, data)
}
